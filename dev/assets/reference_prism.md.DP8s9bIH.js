import{_ as a,C as o,c as n,o as r,j as s,aA as l,G as t,a as p,w as c}from"./chunks/framework.QpvAnQd7.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reference/prism.md","filePath":"reference/prism.md","lastUpdated":null}'),h={name:"reference/prism.md"},d={class:"jldocstring custom-block",open:""};function k(g,e,m,u,f,E){const i=o("Badge");return r(),n("div",null,[s("details",d,[s("summary",null,[e[0]||(e[0]=s("a",{id:"Foresight.prism",href:"#Foresight.prism"},[s("span",{class:"jlbinding"},"Foresight.prism")],-1)),e[1]||(e[1]=p()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prism</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, Y; [palette</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cornflowerblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:crimson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cucumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], colormode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.])</span></span></code></pre></div><p>Color a covariance matrix each element&#39;s contribution to each of the top <code>k</code> principal components, where <code>k</code> is the length of the supplied color palette (defaults to the number of principal component weights given). Provide as positional arguments a vector <code>x</code> of N row names and an NÃ—N covariance matrix <code>Y</code>.</p><p><strong>Keyword Arguments</strong></p><ul><li><p><code>palette</code>: a vector containing a color for each principal component.</p></li><li><p><code>colormode</code>: how to color the covariance matrix. <code>:raw</code> gives no coloring by principal components, <code>:top</code> is a combination of the top three PC colors (default) and <code>:all</code> is a combination of all PC colors, where PCN = :black if N &gt; length(palette).</p></li><li><p><code>verbose</code>: whether to print the feature weights to the console</p></li></ul>',4)),t(i,{type:"info",class:"source-link",text:"source"},{default:c(()=>e[2]||(e[2]=[s("a",{href:"https://github.com/brendanjohnharris/Foresight.jl/blob/3135c4777f6323bfcbe57cd4a3e6bb5a0f9195f8/src/Prism.jl#L21-L30",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})])])}const C=a(h,[["render",k]]);export{y as __pageData,C as default};
