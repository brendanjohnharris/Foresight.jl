import{_ as s,C as a,c as d,o as r,j as o,aA as n,G as c,a as i,w as l}from"./chunks/framework.CFdQwT-g.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reference/covellipse.md","filePath":"reference/covellipse.md","lastUpdated":null}'),p={name:"reference/covellipse.md"},h={class:"jldocstring custom-block",open:""};function g(u,e,m,f,b,v){const t=a("Badge");return r(),d("div",null,[o("details",h,[o("summary",null,[e[0]||(e[0]=o("a",{id:"Foresight.covellipse",href:"#Foresight.covellipse"},[o("span",{class:"jlbinding"},"Foresight.covellipse")],-1)),e[1]||(e[1]=i()),c(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covellipse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(μ, Σ²; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots an ellipse representing a multivariate normal distribution with mean <code>μ</code> and covariance matrix <code>Σ²</code>.</p><p><strong>Key attributes:</strong></p><p><code>scale</code> = <code>2</code>: The scale factor for the ellipse size, in units of standard deviation.</p><p><code>vertices</code> = <code>1000</code>: The number of vertices to use for the ellipse, or a list of angular vertices.</p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>covellipse</code> function is <code>CovEllipse</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>@inherit patchcolor</code> — Sets the color of the poly. Can be a <code>Vector{&lt;:Colorant}</code> for per vertex colors or a single <code>Colorant</code>. A <code>Matrix{&lt;:Colorant}</code> can be used to color the mesh with a texture, which requires the mesh to contain texture coordinates. Vector or Matrices of numbers can be used as well, which will use the colormap arguments to map the numbers to colors. One can also use a <code>&lt;: AbstractPattern</code>, to cover the poly with a regular pattern, e.g. for hatching.</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>[:color =&gt; :patchcolor]</code> — <em>No docs available.</em></p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>true</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — <em>No docs available.</em></p><p><strong><code>linecap</code></strong> = <code>@inherit linecap</code> — <em>No docs available.</em></p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="/Foresight.jl/dev/reference/ziggurat#Makie.Linestyle"><code>Makie.Linestyle</code></a>.</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — <em>No docs available.</em></p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>scale</code></strong> = <code>2</code> — Scale factor for the ellipse size, in units of standard deviation.</p><p><strong><code>shading</code></strong> = <code>false</code> — <em>No docs available.</em></p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>stroke_depth_shift</code></strong> = <code>-1.0e-5</code> — Depth shift of stroke plot. This is useful to avoid z-fighting between the stroke and the fill.</p><p><strong><code>strokecolor</code></strong> = <code>@inherit patchstrokecolor</code> — Sets the color of the outline around a marker.</p><p><strong><code>strokecolormap</code></strong> = <code>@inherit colormap</code> — Sets the colormap that is sampled for numeric <code>color</code>s.</p><p><strong><code>strokewidth</code></strong> = <code>@inherit patchstrokewidth</code> — Sets the width of the outline.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>vertices</code></strong> = <code>1000</code> — Number of vertices to use for the ellipse, or a list of angular vertices</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',43)),c(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...e[2]||(e[2]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L628",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const w=s(p,[["render",g]]);export{y as __pageData,w as default};
