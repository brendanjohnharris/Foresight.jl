import{_ as d,C as a,c as s,o as n,j as o,aA as r,G as c,a as i,w as l}from"./chunks/framework.Bur-k5uE.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reference/bandwidth.md","filePath":"reference/bandwidth.md","lastUpdated":null}'),p={name:"reference/bandwidth.md"},h={class:"jldocstring custom-block",open:""};function g(u,e,b,f,m,w){const t=a("Badge");return n(),s("div",null,[o("details",h,[o("summary",null,[e[0]||(e[0]=o("a",{id:"Foresight.bandwidth",href:"#Foresight.bandwidth"},[o("span",{class:"jlbinding"},"Foresight.bandwidth")],-1)),e[1]||(e[1]=i()),c(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bandwidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots a band of a certain width about a center line.</p><p><strong>Key attributes:</strong></p><p><code>bandwidth</code> = <code>1</code>: Vertical width of the band in data space. Can be a vector of <code>length(x)</code>.</p><p><code>direction</code> = <code>:x</code>: The direction of the band, either <code>:x</code> or <code>:y</code>.</p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>bandwidth</code> function is <code>Bandwidth</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>backlight</code></strong> = <code>0.0</code> — Sets a weight for secondary light calculation with inverted normals.</p><p><strong><code>bandwidth</code></strong> = <code>1</code> — Vertical width of the band in data space</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>@inherit patchcolor</code> — Sets the color of the mesh. Can be a <code>Vector{&lt;:Colorant}</code> for per vertex colors or a single <code>Colorant</code>. A <code>Matrix{&lt;:Colorant}</code> can be used to color the mesh with a texture, which requires the mesh to contain texture coordinates. A <code>&lt;: AbstractPattern</code> can be used to apply a repeated, pixel sampled pattern to the mesh, e.g. for hatching.</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>:color</code> — <em>No docs available.</em></p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>diffuse</code></strong> = <code>1.0</code> — Sets how strongly the red, green and blue channel react to diffuse (scattered) light.</p><p><strong><code>direction</code></strong> = <code>:x</code> — The direction of the band</p><p><strong><code>fxaa</code></strong> = <code>true</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>interpolate</code></strong> = <code>true</code> — sets whether colors should be interpolated</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>matcap</code></strong> = <code>nothing</code> — <em>No docs available.</em></p><p><strong><code>material</code></strong> = <code>nothing</code> — RPRMakie only attribute to set complex RadeonProRender materials. <em>Warning</em>, how to set an RPR material may change and other backends will ignore this attribute</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>shading</code></strong> = <code>NoShading</code> — Controls if the plot object is shaded by the parent scenes lights or not. The lighting algorithm used is controlled by the scenes <code>shading</code> attribute.</p><p><strong><code>shininess</code></strong> = <code>32.0</code> — Sets how sharp the reflection is.</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>specular</code></strong> = <code>0.2</code> — Sets how strongly the object reflects light in the red, green and blue channels.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>uv_transform</code></strong> = <code>automatic</code> — Sets a transform for uv coordinates, which controls how a texture is mapped to a mesh. The attribute can be <code>I</code>, <code>scale::VecTypes{2}</code>, <code>(translation::VecTypes{2}, scale::VecTypes{2})</code>, any of <code>:rotr90</code>, <code>:rotl90</code>, <code>:rot180</code>, <code>:swap_xy</code>/<code>:transpose</code>, <code>:flip_x</code>, <code>:flip_y</code>, <code>:flip_xy</code>, or most generally a <code>Makie.Mat{2, 3, Float32}</code> or <code>Makie.Mat3f</code> as returned by <code>Makie.uv_transform()</code>. They can also be changed by passing a tuple <code>(op3, op2, op1)</code>.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',42)),c(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[2]||(e[2]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.5/src/recipes.jl#L527-L628",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})])])}const _=d(p,[["render",g]]);export{k as __pageData,_ as default};
